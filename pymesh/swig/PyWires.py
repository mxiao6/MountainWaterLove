# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_PyWires')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_PyWires')
    _PyWires = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PyWires', [dirname(__file__)])
        except ImportError:
            import _PyWires
            return _PyWires
        try:
            _mod = imp.load_module('_PyWires', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _PyWires = swig_import_helper()
    del swig_import_helper
else:
    import _PyWires
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

SHARED_PTR_DISOWN = _PyWires.SHARED_PTR_DISOWN
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyWires.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _PyWires.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _PyWires.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _PyWires.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _PyWires.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _PyWires.SwigPyIterator_equal(self, x)

    def copy(self):
        return _PyWires.SwigPyIterator_copy(self)

    def next(self):
        return _PyWires.SwigPyIterator_next(self)

    def __next__(self):
        return _PyWires.SwigPyIterator___next__(self)

    def previous(self):
        return _PyWires.SwigPyIterator_previous(self)

    def advance(self, n):
        return _PyWires.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _PyWires.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _PyWires.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _PyWires.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _PyWires.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _PyWires.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _PyWires.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _PyWires.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectori(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PyWires.vectori_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyWires.vectori___nonzero__(self)

    def __bool__(self):
        return _PyWires.vectori___bool__(self)

    def __len__(self):
        return _PyWires.vectori___len__(self)

    def __getslice__(self, i, j):
        return _PyWires.vectori___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyWires.vectori___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyWires.vectori___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyWires.vectori___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyWires.vectori___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyWires.vectori___setitem__(self, *args)

    def pop(self):
        return _PyWires.vectori_pop(self)

    def append(self, x):
        return _PyWires.vectori_append(self, x)

    def empty(self):
        return _PyWires.vectori_empty(self)

    def size(self):
        return _PyWires.vectori_size(self)

    def swap(self, v):
        return _PyWires.vectori_swap(self, v)

    def begin(self):
        return _PyWires.vectori_begin(self)

    def end(self):
        return _PyWires.vectori_end(self)

    def rbegin(self):
        return _PyWires.vectori_rbegin(self)

    def rend(self):
        return _PyWires.vectori_rend(self)

    def clear(self):
        return _PyWires.vectori_clear(self)

    def get_allocator(self):
        return _PyWires.vectori_get_allocator(self)

    def pop_back(self):
        return _PyWires.vectori_pop_back(self)

    def erase(self, *args):
        return _PyWires.vectori_erase(self, *args)

    def __init__(self, *args):
        this = _PyWires.new_vectori(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PyWires.vectori_push_back(self, x)

    def front(self):
        return _PyWires.vectori_front(self)

    def back(self):
        return _PyWires.vectori_back(self)

    def assign(self, n, x):
        return _PyWires.vectori_assign(self, n, x)

    def resize(self, *args):
        return _PyWires.vectori_resize(self, *args)

    def insert(self, *args):
        return _PyWires.vectori_insert(self, *args)

    def reserve(self, n):
        return _PyWires.vectori_reserve(self, n)

    def capacity(self):
        return _PyWires.vectori_capacity(self)
    __swig_destroy__ = _PyWires.delete_vectori
    __del__ = lambda self: None
vectori_swigregister = _PyWires.vectori_swigregister
vectori_swigregister(vectori)

class vectord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectord, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PyWires.vectord_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyWires.vectord___nonzero__(self)

    def __bool__(self):
        return _PyWires.vectord___bool__(self)

    def __len__(self):
        return _PyWires.vectord___len__(self)

    def __getslice__(self, i, j):
        return _PyWires.vectord___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyWires.vectord___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyWires.vectord___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyWires.vectord___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyWires.vectord___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyWires.vectord___setitem__(self, *args)

    def pop(self):
        return _PyWires.vectord_pop(self)

    def append(self, x):
        return _PyWires.vectord_append(self, x)

    def empty(self):
        return _PyWires.vectord_empty(self)

    def size(self):
        return _PyWires.vectord_size(self)

    def swap(self, v):
        return _PyWires.vectord_swap(self, v)

    def begin(self):
        return _PyWires.vectord_begin(self)

    def end(self):
        return _PyWires.vectord_end(self)

    def rbegin(self):
        return _PyWires.vectord_rbegin(self)

    def rend(self):
        return _PyWires.vectord_rend(self)

    def clear(self):
        return _PyWires.vectord_clear(self)

    def get_allocator(self):
        return _PyWires.vectord_get_allocator(self)

    def pop_back(self):
        return _PyWires.vectord_pop_back(self)

    def erase(self, *args):
        return _PyWires.vectord_erase(self, *args)

    def __init__(self, *args):
        this = _PyWires.new_vectord(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PyWires.vectord_push_back(self, x)

    def front(self):
        return _PyWires.vectord_front(self)

    def back(self):
        return _PyWires.vectord_back(self)

    def assign(self, n, x):
        return _PyWires.vectord_assign(self, n, x)

    def resize(self, *args):
        return _PyWires.vectord_resize(self, *args)

    def insert(self, *args):
        return _PyWires.vectord_insert(self, *args)

    def reserve(self, n):
        return _PyWires.vectord_reserve(self, n)

    def capacity(self):
        return _PyWires.vectord_capacity(self)
    __swig_destroy__ = _PyWires.delete_vectord
    __del__ = lambda self: None
vectord_swigregister = _PyWires.vectord_swigregister
vectord_swigregister(vectord)

class vectors(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectors, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PyWires.vectors_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyWires.vectors___nonzero__(self)

    def __bool__(self):
        return _PyWires.vectors___bool__(self)

    def __len__(self):
        return _PyWires.vectors___len__(self)

    def __getslice__(self, i, j):
        return _PyWires.vectors___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyWires.vectors___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyWires.vectors___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyWires.vectors___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyWires.vectors___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyWires.vectors___setitem__(self, *args)

    def pop(self):
        return _PyWires.vectors_pop(self)

    def append(self, x):
        return _PyWires.vectors_append(self, x)

    def empty(self):
        return _PyWires.vectors_empty(self)

    def size(self):
        return _PyWires.vectors_size(self)

    def swap(self, v):
        return _PyWires.vectors_swap(self, v)

    def begin(self):
        return _PyWires.vectors_begin(self)

    def end(self):
        return _PyWires.vectors_end(self)

    def rbegin(self):
        return _PyWires.vectors_rbegin(self)

    def rend(self):
        return _PyWires.vectors_rend(self)

    def clear(self):
        return _PyWires.vectors_clear(self)

    def get_allocator(self):
        return _PyWires.vectors_get_allocator(self)

    def pop_back(self):
        return _PyWires.vectors_pop_back(self)

    def erase(self, *args):
        return _PyWires.vectors_erase(self, *args)

    def __init__(self, *args):
        this = _PyWires.new_vectors(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PyWires.vectors_push_back(self, x)

    def front(self):
        return _PyWires.vectors_front(self)

    def back(self):
        return _PyWires.vectors_back(self)

    def assign(self, n, x):
        return _PyWires.vectors_assign(self, n, x)

    def resize(self, *args):
        return _PyWires.vectors_resize(self, *args)

    def insert(self, *args):
        return _PyWires.vectors_insert(self, *args)

    def reserve(self, n):
        return _PyWires.vectors_reserve(self, n)

    def capacity(self):
        return _PyWires.vectors_capacity(self)
    __swig_destroy__ = _PyWires.delete_vectors
    __del__ = lambda self: None
vectors_swigregister = _PyWires.vectors_swigregister
vectors_swigregister(vectors)

class Mesh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyWires.delete_Mesh
    __del__ = lambda self: None

    def get_dim(self):
        return _PyWires.Mesh_get_dim(self)

    def get_num_vertices(self):
        return _PyWires.Mesh_get_num_vertices(self)

    def get_num_faces(self):
        return _PyWires.Mesh_get_num_faces(self)

    def get_num_voxels(self):
        return _PyWires.Mesh_get_num_voxels(self)

    def get_vertex(self, *args):
        return _PyWires.Mesh_get_vertex(self, *args)

    def get_face(self, *args):
        return _PyWires.Mesh_get_face(self, *args)

    def get_voxel(self, *args):
        return _PyWires.Mesh_get_voxel(self, *args)

    def get_vertices(self, *args):
        return _PyWires.Mesh_get_vertices(self, *args)

    def get_faces(self, *args):
        return _PyWires.Mesh_get_faces(self, *args)

    def get_voxels(self, *args):
        return _PyWires.Mesh_get_voxels(self, *args)

    def get_vertex_per_face(self):
        return _PyWires.Mesh_get_vertex_per_face(self)

    def get_vertex_per_voxel(self):
        return _PyWires.Mesh_get_vertex_per_voxel(self)

    def enable_connectivity(self):
        return _PyWires.Mesh_enable_connectivity(self)

    def enable_vertex_connectivity(self):
        return _PyWires.Mesh_enable_vertex_connectivity(self)

    def enable_face_connectivity(self):
        return _PyWires.Mesh_enable_face_connectivity(self)

    def enable_voxel_connectivity(self):
        return _PyWires.Mesh_enable_voxel_connectivity(self)

    def get_vertex_adjacent_vertices(self, vi):
        return _PyWires.Mesh_get_vertex_adjacent_vertices(self, vi)

    def get_vertex_adjacent_faces(self, vi):
        return _PyWires.Mesh_get_vertex_adjacent_faces(self, vi)

    def get_vertex_adjacent_voxels(self, vi):
        return _PyWires.Mesh_get_vertex_adjacent_voxels(self, vi)

    def get_face_adjacent_faces(self, fi):
        return _PyWires.Mesh_get_face_adjacent_faces(self, fi)

    def get_face_adjacent_voxels(self, fi):
        return _PyWires.Mesh_get_face_adjacent_voxels(self, fi)

    def get_voxel_adjacent_faces(self, Vi):
        return _PyWires.Mesh_get_voxel_adjacent_faces(self, Vi)

    def get_voxel_adjacent_voxels(self, Vi):
        return _PyWires.Mesh_get_voxel_adjacent_voxels(self, Vi)

    def has_attribute(self, attr_name):
        return _PyWires.Mesh_has_attribute(self, attr_name)

    def add_attribute(self, attr_name):
        return _PyWires.Mesh_add_attribute(self, attr_name)

    def remove_attribute(self, attr_name):
        return _PyWires.Mesh_remove_attribute(self, attr_name)

    def get_attribute(self, *args):
        return _PyWires.Mesh_get_attribute(self, *args)

    def set_attribute(self, attr_name, attr_value):
        return _PyWires.Mesh_set_attribute(self, attr_name, attr_value)

    def get_attribute_names(self):
        return _PyWires.Mesh_get_attribute_names(self)
Mesh_swigregister = _PyWires.Mesh_swigregister
Mesh_swigregister(Mesh)

class vectorb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorb, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PyWires.vectorb_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyWires.vectorb___nonzero__(self)

    def __bool__(self):
        return _PyWires.vectorb___bool__(self)

    def __len__(self):
        return _PyWires.vectorb___len__(self)

    def __getslice__(self, i, j):
        return _PyWires.vectorb___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyWires.vectorb___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyWires.vectorb___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyWires.vectorb___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyWires.vectorb___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyWires.vectorb___setitem__(self, *args)

    def pop(self):
        return _PyWires.vectorb_pop(self)

    def append(self, x):
        return _PyWires.vectorb_append(self, x)

    def empty(self):
        return _PyWires.vectorb_empty(self)

    def size(self):
        return _PyWires.vectorb_size(self)

    def swap(self, v):
        return _PyWires.vectorb_swap(self, v)

    def begin(self):
        return _PyWires.vectorb_begin(self)

    def end(self):
        return _PyWires.vectorb_end(self)

    def rbegin(self):
        return _PyWires.vectorb_rbegin(self)

    def rend(self):
        return _PyWires.vectorb_rend(self)

    def clear(self):
        return _PyWires.vectorb_clear(self)

    def get_allocator(self):
        return _PyWires.vectorb_get_allocator(self)

    def pop_back(self):
        return _PyWires.vectorb_pop_back(self)

    def erase(self, *args):
        return _PyWires.vectorb_erase(self, *args)

    def __init__(self, *args):
        this = _PyWires.new_vectorb(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PyWires.vectorb_push_back(self, x)

    def front(self):
        return _PyWires.vectorb_front(self)

    def back(self):
        return _PyWires.vectorb_back(self)

    def assign(self, n, x):
        return _PyWires.vectorb_assign(self, n, x)

    def resize(self, *args):
        return _PyWires.vectorb_resize(self, *args)

    def insert(self, *args):
        return _PyWires.vectorb_insert(self, *args)

    def reserve(self, n):
        return _PyWires.vectorb_reserve(self, n)

    def capacity(self):
        return _PyWires.vectorb_capacity(self)
    __swig_destroy__ = _PyWires.delete_vectorb
    __del__ = lambda self: None
vectorb_swigregister = _PyWires.vectorb_swigregister
vectorb_swigregister(vectorb)

class WireNetwork(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WireNetwork, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WireNetwork, name)
    __repr__ = _swig_repr
    if _newclass:
        create = staticmethod(_PyWires.WireNetwork_create)
    else:
        create = _PyWires.WireNetwork_create
    if _newclass:
        create_raw = staticmethod(_PyWires.WireNetwork_create_raw)
    else:
        create_raw = _PyWires.WireNetwork_create_raw

    def __init__(self, *args):
        this = _PyWires.new_WireNetwork(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_dim(self):
        return _PyWires.WireNetwork_get_dim(self)

    def get_num_vertices(self):
        return _PyWires.WireNetwork_get_num_vertices(self)

    def get_num_edges(self):
        return _PyWires.WireNetwork_get_num_edges(self)

    def get_vertices(self):
        return _PyWires.WireNetwork_get_vertices(self)

    def get_edges(self):
        return _PyWires.WireNetwork_get_edges(self)

    def set_vertices(self, vertices):
        return _PyWires.WireNetwork_set_vertices(self, vertices)

    def set_edges(self, edges):
        return _PyWires.WireNetwork_set_edges(self, edges)

    def scale(self, factors):
        return _PyWires.WireNetwork_scale(self, factors)

    def scale_fit(self, bbox_min, bbox_max):
        return _PyWires.WireNetwork_scale_fit(self, bbox_min, bbox_max)

    def translate(self, offset):
        return _PyWires.WireNetwork_translate(self, offset)

    def center_at_origin(self):
        return _PyWires.WireNetwork_center_at_origin(self)

    def center(self):
        return _PyWires.WireNetwork_center(self)

    def get_bbox_min(self):
        return _PyWires.WireNetwork_get_bbox_min(self)

    def get_bbox_max(self):
        return _PyWires.WireNetwork_get_bbox_max(self)

    def filter_vertices(self, to_keep):
        return _PyWires.WireNetwork_filter_vertices(self, to_keep)

    def filter_edges(self, to_keep):
        return _PyWires.WireNetwork_filter_edges(self, to_keep)

    def write_to_file(self, filename):
        return _PyWires.WireNetwork_write_to_file(self, filename)

    def has_attribute(self, name):
        return _PyWires.WireNetwork_has_attribute(self, name)

    def is_vertex_attribute(self, name):
        return _PyWires.WireNetwork_is_vertex_attribute(self, name)

    def get_attribute(self, name):
        return _PyWires.WireNetwork_get_attribute(self, name)

    def add_attribute(self, name, vertex_wise=True, auto_compute=True):
        return _PyWires.WireNetwork_add_attribute(self, name, vertex_wise, auto_compute)

    def set_attribute(self, name, values):
        return _PyWires.WireNetwork_set_attribute(self, name, values)

    def get_attribute_names(self):
        return _PyWires.WireNetwork_get_attribute_names(self)

    def clear_attributes(self):
        return _PyWires.WireNetwork_clear_attributes(self)

    def with_connectivity(self):
        return _PyWires.WireNetwork_with_connectivity(self)

    def compute_connectivity(self):
        return _PyWires.WireNetwork_compute_connectivity(self)

    def get_vertex_neighbors(self, i):
        return _PyWires.WireNetwork_get_vertex_neighbors(self, i)

    def is_printable(self, *args):
        return _PyWires.WireNetwork_is_printable(self, *args)
    __swig_destroy__ = _PyWires.delete_WireNetwork
    __del__ = lambda self: None
WireNetwork_swigregister = _PyWires.WireNetwork_swigregister
WireNetwork_swigregister(WireNetwork)

def WireNetwork_create(wire_file):
    return _PyWires.WireNetwork_create(wire_file)
WireNetwork_create = _PyWires.WireNetwork_create

def WireNetwork_create_raw(vertices, edges):
    return _PyWires.WireNetwork_create_raw(vertices, edges)
WireNetwork_create_raw = _PyWires.WireNetwork_create_raw

VERTEX = _PyWires.VERTEX
EDGE = _PyWires.EDGE
class ParameterManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterManager, name)
    __repr__ = _swig_repr
    ISOTROPIC = _PyWires.ParameterManager_ISOTROPIC
    ORTHOTROPIC = _PyWires.ParameterManager_ORTHOTROPIC
    UNKNOWN = _PyWires.ParameterManager_UNKNOWN
    if _newclass:
        create = staticmethod(_PyWires.ParameterManager_create)
    else:
        create = _PyWires.ParameterManager_create
    if _newclass:
        create_isotropic = staticmethod(_PyWires.ParameterManager_create_isotropic)
    else:
        create_isotropic = _PyWires.ParameterManager_create_isotropic
    if _newclass:
        create_empty_manager = staticmethod(_PyWires.ParameterManager_create_empty_manager)
    else:
        create_empty_manager = _PyWires.ParameterManager_create_empty_manager
    if _newclass:
        create_from_setting_file = staticmethod(_PyWires.ParameterManager_create_from_setting_file)
    else:
        create_from_setting_file = _PyWires.ParameterManager_create_from_setting_file
    if _newclass:
        create_from_dof_file = staticmethod(_PyWires.ParameterManager_create_from_dof_file)
    else:
        create_from_dof_file = _PyWires.ParameterManager_create_from_dof_file

    def __init__(self, wire_network, default_thickness):
        this = _PyWires.new_ParameterManager(wire_network, default_thickness)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_wire_network(self):
        return _PyWires.ParameterManager_get_wire_network(self)

    def set_wire_network(self, wire_network):
        return _PyWires.ParameterManager_set_wire_network(self, wire_network)

    def get_default_thickness(self):
        return _PyWires.ParameterManager_get_default_thickness(self)

    def set_default_thickness(self, thickness):
        return _PyWires.ParameterManager_set_default_thickness(self, thickness)

    def get_thickness_params(self, *args):
        return _PyWires.ParameterManager_get_thickness_params(self, *args)

    def get_offset_params(self, *args):
        return _PyWires.ParameterManager_get_offset_params(self, *args)

    def get_num_dofs(self):
        return _PyWires.ParameterManager_get_num_dofs(self)

    def get_num_thickness_dofs(self):
        return _PyWires.ParameterManager_get_num_thickness_dofs(self)

    def get_num_offset_dofs(self):
        return _PyWires.ParameterManager_get_num_offset_dofs(self)

    def get_dofs(self):
        return _PyWires.ParameterManager_get_dofs(self)

    def set_dofs(self, values):
        return _PyWires.ParameterManager_set_dofs(self, values)

    def compute_shape_velocity(self, mesh):
        return _PyWires.ParameterManager_compute_shape_velocity(self, mesh)

    def compute_wire_gradient(self, i):
        return _PyWires.ParameterManager_compute_wire_gradient(self, i)

    def get_thickness_dof_map(self):
        return _PyWires.ParameterManager_get_thickness_dof_map(self)

    def get_offset_dof_map(self):
        return _PyWires.ParameterManager_get_offset_dof_map(self)

    def save_dofs(self, dof_file):
        return _PyWires.ParameterManager_save_dofs(self, dof_file)

    def load_dofs(self, dof_file):
        return _PyWires.ParameterManager_load_dofs(self, dof_file)

    def get_formulas(self):
        return _PyWires.ParameterManager_get_formulas(self)

    def get_dof_type(self):
        return _PyWires.ParameterManager_get_dof_type(self)

    def evaluate_thickness_no_formula(self):
        return _PyWires.ParameterManager_evaluate_thickness_no_formula(self)

    def evaluate_thickness(self, vars):
        return _PyWires.ParameterManager_evaluate_thickness(self, vars)

    def evaluate_offset_no_formula(self):
        return _PyWires.ParameterManager_evaluate_offset_no_formula(self)

    def evaluate_offset(self, vars):
        return _PyWires.ParameterManager_evaluate_offset(self, vars)

    def get_thickness_type(self):
        return _PyWires.ParameterManager_get_thickness_type(self)

    def set_thickness_type(self, type):
        return _PyWires.ParameterManager_set_thickness_type(self, type)

    def add_thickness_parameter(self, roi, formula, value):
        return _PyWires.ParameterManager_add_thickness_parameter(self, roi, formula, value)

    def get_offset_type(self):
        return _PyWires.ParameterManager_get_offset_type(self)

    def set_offset_type(self, type):
        return _PyWires.ParameterManager_set_offset_type(self, type)

    def add_offset_parameter(self, roi, formula, value, axis):
        return _PyWires.ParameterManager_add_offset_parameter(self, roi, formula, value, axis)

    def add_custom_offset_parameter(self, roi, formula, value, custom_offset):
        return _PyWires.ParameterManager_add_custom_offset_parameter(self, roi, formula, value, custom_offset)

    def add_isotropic_offset_parameter(self, roi, formula, value, dof_dir):
        return _PyWires.ParameterManager_add_isotropic_offset_parameter(self, roi, formula, value, dof_dir)
    __swig_destroy__ = _PyWires.delete_ParameterManager
    __del__ = lambda self: None
ParameterManager_swigregister = _PyWires.ParameterManager_swigregister
ParameterManager_swigregister(ParameterManager)

def ParameterManager_create(*args):
    return _PyWires.ParameterManager_create(*args)
ParameterManager_create = _PyWires.ParameterManager_create

def ParameterManager_create_isotropic(*args):
    return _PyWires.ParameterManager_create_isotropic(*args)
ParameterManager_create_isotropic = _PyWires.ParameterManager_create_isotropic

def ParameterManager_create_empty_manager(wire_network, default_thickness=0.5):
    return _PyWires.ParameterManager_create_empty_manager(wire_network, default_thickness)
ParameterManager_create_empty_manager = _PyWires.ParameterManager_create_empty_manager

def ParameterManager_create_from_setting_file(wire_network, default_thickness, orbit_file, modifier_file):
    return _PyWires.ParameterManager_create_from_setting_file(wire_network, default_thickness, orbit_file, modifier_file)
ParameterManager_create_from_setting_file = _PyWires.ParameterManager_create_from_setting_file

def ParameterManager_create_from_dof_file(wire_network, default_thickness, dof_file):
    return _PyWires.ParameterManager_create_from_dof_file(wire_network, default_thickness, dof_file)
ParameterManager_create_from_dof_file = _PyWires.ParameterManager_create_from_dof_file

class WireVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WireVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WireVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PyWires.WireVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyWires.WireVector___nonzero__(self)

    def __bool__(self):
        return _PyWires.WireVector___bool__(self)

    def __len__(self):
        return _PyWires.WireVector___len__(self)

    def __getslice__(self, i, j):
        return _PyWires.WireVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyWires.WireVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyWires.WireVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyWires.WireVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyWires.WireVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyWires.WireVector___setitem__(self, *args)

    def pop(self):
        return _PyWires.WireVector_pop(self)

    def append(self, x):
        return _PyWires.WireVector_append(self, x)

    def empty(self):
        return _PyWires.WireVector_empty(self)

    def size(self):
        return _PyWires.WireVector_size(self)

    def swap(self, v):
        return _PyWires.WireVector_swap(self, v)

    def begin(self):
        return _PyWires.WireVector_begin(self)

    def end(self):
        return _PyWires.WireVector_end(self)

    def rbegin(self):
        return _PyWires.WireVector_rbegin(self)

    def rend(self):
        return _PyWires.WireVector_rend(self)

    def clear(self):
        return _PyWires.WireVector_clear(self)

    def get_allocator(self):
        return _PyWires.WireVector_get_allocator(self)

    def pop_back(self):
        return _PyWires.WireVector_pop_back(self)

    def erase(self, *args):
        return _PyWires.WireVector_erase(self, *args)

    def __init__(self, *args):
        this = _PyWires.new_WireVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PyWires.WireVector_push_back(self, x)

    def front(self):
        return _PyWires.WireVector_front(self)

    def back(self):
        return _PyWires.WireVector_back(self)

    def assign(self, n, x):
        return _PyWires.WireVector_assign(self, n, x)

    def resize(self, *args):
        return _PyWires.WireVector_resize(self, *args)

    def insert(self, *args):
        return _PyWires.WireVector_insert(self, *args)

    def reserve(self, n):
        return _PyWires.WireVector_reserve(self, n)

    def capacity(self):
        return _PyWires.WireVector_capacity(self)
    __swig_destroy__ = _PyWires.delete_WireVector
    __del__ = lambda self: None
WireVector_swigregister = _PyWires.WireVector_swigregister
WireVector_swigregister(WireVector)

class WireTiler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WireTiler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WireTiler, name)
    __repr__ = _swig_repr

    def __init__(self, unit_wire_network):
        this = _PyWires.new_WireTiler(unit_wire_network)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def with_parameters(self, params):
        return _PyWires.WireTiler_with_parameters(self, params)

    def tile_with_guide_bbox(self, bbox_min, bbox_max, repetitions):
        return _PyWires.WireTiler_tile_with_guide_bbox(self, bbox_min, bbox_max, repetitions)

    def tile_with_guide_mesh(self, mesh):
        return _PyWires.WireTiler_tile_with_guide_mesh(self, mesh)

    def tile_with_mixed_patterns(self, patterns, mesh, per_vertex_thickness, isotropic):
        return _PyWires.WireTiler_tile_with_mixed_patterns(self, patterns, mesh, per_vertex_thickness, isotropic)
    __swig_destroy__ = _PyWires.delete_WireTiler
    __del__ = lambda self: None
WireTiler_swigregister = _PyWires.WireTiler_swigregister
WireTiler_swigregister(WireTiler)

class WireProfile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WireProfile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WireProfile, name)
    __repr__ = _swig_repr
    if _newclass:
        create = staticmethod(_PyWires.WireProfile_create)
    else:
        create = _PyWires.WireProfile_create
    if _newclass:
        create_isotropic = staticmethod(_PyWires.WireProfile_create_isotropic)
    else:
        create_isotropic = _PyWires.WireProfile_create_isotropic
    if _newclass:
        create_2D = staticmethod(_PyWires.WireProfile_create_2D)
    else:
        create_2D = _PyWires.WireProfile_create_2D
    __swig_destroy__ = _PyWires.delete_WireProfile
    __del__ = lambda self: None

    def initialize(self, loop):
        return _PyWires.WireProfile_initialize(self, loop)

    def with_geometry_correction_lookup(self, csv_file):
        return _PyWires.WireProfile_with_geometry_correction_lookup(self, csv_file)

    def place(self, end_1, end_2, offset, thickness, rel_correction, abs_correction, correction_cap, spread_const):
        return _PyWires.WireProfile_place(self, end_1, end_2, offset, thickness, rel_correction, abs_correction, correction_cap, spread_const)

    def size(self):
        return _PyWires.WireProfile_size(self)

    def __init__(self):
        this = _PyWires.new_WireProfile()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
WireProfile_swigregister = _PyWires.WireProfile_swigregister
WireProfile_swigregister(WireProfile)

def WireProfile_create(name):
    return _PyWires.WireProfile_create(name)
WireProfile_create = _PyWires.WireProfile_create

def WireProfile_create_isotropic(num_samples):
    return _PyWires.WireProfile_create_isotropic(num_samples)
WireProfile_create_isotropic = _PyWires.WireProfile_create_isotropic

def WireProfile_create_2D():
    return _PyWires.WireProfile_create_2D()
WireProfile_create_2D = _PyWires.WireProfile_create_2D

class InflatorEngine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InflatorEngine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InflatorEngine, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    PER_VERTEX = _PyWires.InflatorEngine_PER_VERTEX
    PER_EDGE = _PyWires.InflatorEngine_PER_EDGE
    if _newclass:
        create = staticmethod(_PyWires.InflatorEngine_create)
    else:
        create = _PyWires.InflatorEngine_create
    if _newclass:
        create_parametric = staticmethod(_PyWires.InflatorEngine_create_parametric)
    else:
        create_parametric = _PyWires.InflatorEngine_create_parametric
    if _newclass:
        create_isotropic_parametric = staticmethod(_PyWires.InflatorEngine_create_isotropic_parametric)
    else:
        create_isotropic_parametric = _PyWires.InflatorEngine_create_isotropic_parametric
    __swig_destroy__ = _PyWires.delete_InflatorEngine
    __del__ = lambda self: None

    def with_shape_velocities(self):
        return _PyWires.InflatorEngine_with_shape_velocities(self)

    def inflate(self):
        return _PyWires.InflatorEngine_inflate(self)

    def get_shape_velocities(self):
        return _PyWires.InflatorEngine_get_shape_velocities(self)

    def set_uniform_thickness(self, thickness):
        return _PyWires.InflatorEngine_set_uniform_thickness(self, thickness)

    def set_thickness(self, thickness):
        return _PyWires.InflatorEngine_set_thickness(self, thickness)

    def set_thickness_type(self, type):
        return _PyWires.InflatorEngine_set_thickness_type(self, type)

    def self_intersection_is_fatal(self):
        return _PyWires.InflatorEngine_self_intersection_is_fatal(self)

    def with_refinement(self, algorithm, order):
        return _PyWires.InflatorEngine_with_refinement(self, algorithm, order)

    def with_geometry_correction_lookup(self, csv_file):
        return _PyWires.InflatorEngine_with_geometry_correction_lookup(self, csv_file)

    def with_rel_geometry_correction(self, correction):
        return _PyWires.InflatorEngine_with_rel_geometry_correction(self, correction)

    def with_abs_geometry_correction(self, correction):
        return _PyWires.InflatorEngine_with_abs_geometry_correction(self, correction)

    def set_geometry_correction_cap(self, cap):
        return _PyWires.InflatorEngine_set_geometry_correction_cap(self, cap)

    def set_geometry_spread_constant(self, val):
        return _PyWires.InflatorEngine_set_geometry_spread_constant(self, val)

    def get_thickness(self):
        return _PyWires.InflatorEngine_get_thickness(self)

    def get_vertices(self):
        return _PyWires.InflatorEngine_get_vertices(self)

    def get_faces(self):
        return _PyWires.InflatorEngine_get_faces(self)

    def get_face_sources(self):
        return _PyWires.InflatorEngine_get_face_sources(self)

    def get_thickness_type(self):
        return _PyWires.InflatorEngine_get_thickness_type(self)

    def set_profile(self, profile):
        return _PyWires.InflatorEngine_set_profile(self, profile)
InflatorEngine_swigregister = _PyWires.InflatorEngine_swigregister
InflatorEngine_swigregister(InflatorEngine)

def InflatorEngine_create(type, network):
    return _PyWires.InflatorEngine_create(type, network)
InflatorEngine_create = _PyWires.InflatorEngine_create

def InflatorEngine_create_parametric(network, manager):
    return _PyWires.InflatorEngine_create_parametric(network, manager)
InflatorEngine_create_parametric = _PyWires.InflatorEngine_create_parametric

def InflatorEngine_create_isotropic_parametric(network, manager):
    return _PyWires.InflatorEngine_create_isotropic_parametric(network, manager)
InflatorEngine_create_isotropic_parametric = _PyWires.InflatorEngine_create_isotropic_parametric

class SymmetryChecker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SymmetryChecker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SymmetryChecker, name)
    __repr__ = _swig_repr

    def __init__(self, wire_network):
        this = _PyWires.new_SymmetryChecker(wire_network)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def has_cubic_symmetry(self):
        return _PyWires.SymmetryChecker_has_cubic_symmetry(self)

    def update(self):
        return _PyWires.SymmetryChecker_update(self)
    __swig_destroy__ = _PyWires.delete_SymmetryChecker
    __del__ = lambda self: None
SymmetryChecker_swigregister = _PyWires.SymmetryChecker_swigregister
SymmetryChecker_swigregister(SymmetryChecker)

# This file is compatible with both classic and new-style classes.


