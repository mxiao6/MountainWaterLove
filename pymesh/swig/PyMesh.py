# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_PyMesh')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_PyMesh')
    _PyMesh = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PyMesh', [dirname(__file__)])
        except ImportError:
            import _PyMesh
            return _PyMesh
        try:
            _mod = imp.load_module('_PyMesh', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _PyMesh = swig_import_helper()
    del swig_import_helper
else:
    import _PyMesh
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

SHARED_PTR_DISOWN = _PyMesh.SHARED_PTR_DISOWN
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyMesh.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _PyMesh.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _PyMesh.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _PyMesh.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _PyMesh.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _PyMesh.SwigPyIterator_equal(self, x)

    def copy(self):
        return _PyMesh.SwigPyIterator_copy(self)

    def next(self):
        return _PyMesh.SwigPyIterator_next(self)

    def __next__(self):
        return _PyMesh.SwigPyIterator___next__(self)

    def previous(self):
        return _PyMesh.SwigPyIterator_previous(self)

    def advance(self, n):
        return _PyMesh.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _PyMesh.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _PyMesh.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _PyMesh.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _PyMesh.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _PyMesh.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _PyMesh.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _PyMesh.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectori(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PyMesh.vectori_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyMesh.vectori___nonzero__(self)

    def __bool__(self):
        return _PyMesh.vectori___bool__(self)

    def __len__(self):
        return _PyMesh.vectori___len__(self)

    def __getslice__(self, i, j):
        return _PyMesh.vectori___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyMesh.vectori___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyMesh.vectori___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyMesh.vectori___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyMesh.vectori___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyMesh.vectori___setitem__(self, *args)

    def pop(self):
        return _PyMesh.vectori_pop(self)

    def append(self, x):
        return _PyMesh.vectori_append(self, x)

    def empty(self):
        return _PyMesh.vectori_empty(self)

    def size(self):
        return _PyMesh.vectori_size(self)

    def swap(self, v):
        return _PyMesh.vectori_swap(self, v)

    def begin(self):
        return _PyMesh.vectori_begin(self)

    def end(self):
        return _PyMesh.vectori_end(self)

    def rbegin(self):
        return _PyMesh.vectori_rbegin(self)

    def rend(self):
        return _PyMesh.vectori_rend(self)

    def clear(self):
        return _PyMesh.vectori_clear(self)

    def get_allocator(self):
        return _PyMesh.vectori_get_allocator(self)

    def pop_back(self):
        return _PyMesh.vectori_pop_back(self)

    def erase(self, *args):
        return _PyMesh.vectori_erase(self, *args)

    def __init__(self, *args):
        this = _PyMesh.new_vectori(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PyMesh.vectori_push_back(self, x)

    def front(self):
        return _PyMesh.vectori_front(self)

    def back(self):
        return _PyMesh.vectori_back(self)

    def assign(self, n, x):
        return _PyMesh.vectori_assign(self, n, x)

    def resize(self, *args):
        return _PyMesh.vectori_resize(self, *args)

    def insert(self, *args):
        return _PyMesh.vectori_insert(self, *args)

    def reserve(self, n):
        return _PyMesh.vectori_reserve(self, n)

    def capacity(self):
        return _PyMesh.vectori_capacity(self)
    __swig_destroy__ = _PyMesh.delete_vectori
    __del__ = lambda self: None
vectori_swigregister = _PyMesh.vectori_swigregister
vectori_swigregister(vectori)

class vectord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectord, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PyMesh.vectord_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyMesh.vectord___nonzero__(self)

    def __bool__(self):
        return _PyMesh.vectord___bool__(self)

    def __len__(self):
        return _PyMesh.vectord___len__(self)

    def __getslice__(self, i, j):
        return _PyMesh.vectord___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyMesh.vectord___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyMesh.vectord___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyMesh.vectord___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyMesh.vectord___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyMesh.vectord___setitem__(self, *args)

    def pop(self):
        return _PyMesh.vectord_pop(self)

    def append(self, x):
        return _PyMesh.vectord_append(self, x)

    def empty(self):
        return _PyMesh.vectord_empty(self)

    def size(self):
        return _PyMesh.vectord_size(self)

    def swap(self, v):
        return _PyMesh.vectord_swap(self, v)

    def begin(self):
        return _PyMesh.vectord_begin(self)

    def end(self):
        return _PyMesh.vectord_end(self)

    def rbegin(self):
        return _PyMesh.vectord_rbegin(self)

    def rend(self):
        return _PyMesh.vectord_rend(self)

    def clear(self):
        return _PyMesh.vectord_clear(self)

    def get_allocator(self):
        return _PyMesh.vectord_get_allocator(self)

    def pop_back(self):
        return _PyMesh.vectord_pop_back(self)

    def erase(self, *args):
        return _PyMesh.vectord_erase(self, *args)

    def __init__(self, *args):
        this = _PyMesh.new_vectord(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PyMesh.vectord_push_back(self, x)

    def front(self):
        return _PyMesh.vectord_front(self)

    def back(self):
        return _PyMesh.vectord_back(self)

    def assign(self, n, x):
        return _PyMesh.vectord_assign(self, n, x)

    def resize(self, *args):
        return _PyMesh.vectord_resize(self, *args)

    def insert(self, *args):
        return _PyMesh.vectord_insert(self, *args)

    def reserve(self, n):
        return _PyMesh.vectord_reserve(self, n)

    def capacity(self):
        return _PyMesh.vectord_capacity(self)
    __swig_destroy__ = _PyMesh.delete_vectord
    __del__ = lambda self: None
vectord_swigregister = _PyMesh.vectord_swigregister
vectord_swigregister(vectord)

class vectors(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectors, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PyMesh.vectors_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyMesh.vectors___nonzero__(self)

    def __bool__(self):
        return _PyMesh.vectors___bool__(self)

    def __len__(self):
        return _PyMesh.vectors___len__(self)

    def __getslice__(self, i, j):
        return _PyMesh.vectors___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyMesh.vectors___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyMesh.vectors___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyMesh.vectors___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyMesh.vectors___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyMesh.vectors___setitem__(self, *args)

    def pop(self):
        return _PyMesh.vectors_pop(self)

    def append(self, x):
        return _PyMesh.vectors_append(self, x)

    def empty(self):
        return _PyMesh.vectors_empty(self)

    def size(self):
        return _PyMesh.vectors_size(self)

    def swap(self, v):
        return _PyMesh.vectors_swap(self, v)

    def begin(self):
        return _PyMesh.vectors_begin(self)

    def end(self):
        return _PyMesh.vectors_end(self)

    def rbegin(self):
        return _PyMesh.vectors_rbegin(self)

    def rend(self):
        return _PyMesh.vectors_rend(self)

    def clear(self):
        return _PyMesh.vectors_clear(self)

    def get_allocator(self):
        return _PyMesh.vectors_get_allocator(self)

    def pop_back(self):
        return _PyMesh.vectors_pop_back(self)

    def erase(self, *args):
        return _PyMesh.vectors_erase(self, *args)

    def __init__(self, *args):
        this = _PyMesh.new_vectors(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PyMesh.vectors_push_back(self, x)

    def front(self):
        return _PyMesh.vectors_front(self)

    def back(self):
        return _PyMesh.vectors_back(self)

    def assign(self, n, x):
        return _PyMesh.vectors_assign(self, n, x)

    def resize(self, *args):
        return _PyMesh.vectors_resize(self, *args)

    def insert(self, *args):
        return _PyMesh.vectors_insert(self, *args)

    def reserve(self, n):
        return _PyMesh.vectors_reserve(self, n)

    def capacity(self):
        return _PyMesh.vectors_capacity(self)
    __swig_destroy__ = _PyMesh.delete_vectors
    __del__ = lambda self: None
vectors_swigregister = _PyMesh.vectors_swigregister
vectors_swigregister(vectors)

class Mesh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyMesh.delete_Mesh
    __del__ = lambda self: None

    def get_dim(self):
        return _PyMesh.Mesh_get_dim(self)

    def get_num_vertices(self):
        return _PyMesh.Mesh_get_num_vertices(self)

    def get_num_faces(self):
        return _PyMesh.Mesh_get_num_faces(self)

    def get_num_voxels(self):
        return _PyMesh.Mesh_get_num_voxels(self)

    def get_vertex(self, *args):
        return _PyMesh.Mesh_get_vertex(self, *args)

    def get_face(self, *args):
        return _PyMesh.Mesh_get_face(self, *args)

    def get_voxel(self, *args):
        return _PyMesh.Mesh_get_voxel(self, *args)

    def get_vertices(self, *args):
        return _PyMesh.Mesh_get_vertices(self, *args)

    def get_faces(self, *args):
        return _PyMesh.Mesh_get_faces(self, *args)

    def get_voxels(self, *args):
        return _PyMesh.Mesh_get_voxels(self, *args)

    def get_vertex_per_face(self):
        return _PyMesh.Mesh_get_vertex_per_face(self)

    def get_vertex_per_voxel(self):
        return _PyMesh.Mesh_get_vertex_per_voxel(self)

    def enable_connectivity(self):
        return _PyMesh.Mesh_enable_connectivity(self)

    def enable_vertex_connectivity(self):
        return _PyMesh.Mesh_enable_vertex_connectivity(self)

    def enable_face_connectivity(self):
        return _PyMesh.Mesh_enable_face_connectivity(self)

    def enable_voxel_connectivity(self):
        return _PyMesh.Mesh_enable_voxel_connectivity(self)

    def get_vertex_adjacent_vertices(self, vi):
        return _PyMesh.Mesh_get_vertex_adjacent_vertices(self, vi)

    def get_vertex_adjacent_faces(self, vi):
        return _PyMesh.Mesh_get_vertex_adjacent_faces(self, vi)

    def get_vertex_adjacent_voxels(self, vi):
        return _PyMesh.Mesh_get_vertex_adjacent_voxels(self, vi)

    def get_face_adjacent_faces(self, fi):
        return _PyMesh.Mesh_get_face_adjacent_faces(self, fi)

    def get_face_adjacent_voxels(self, fi):
        return _PyMesh.Mesh_get_face_adjacent_voxels(self, fi)

    def get_voxel_adjacent_faces(self, Vi):
        return _PyMesh.Mesh_get_voxel_adjacent_faces(self, Vi)

    def get_voxel_adjacent_voxels(self, Vi):
        return _PyMesh.Mesh_get_voxel_adjacent_voxels(self, Vi)

    def has_attribute(self, attr_name):
        return _PyMesh.Mesh_has_attribute(self, attr_name)

    def add_attribute(self, attr_name):
        return _PyMesh.Mesh_add_attribute(self, attr_name)

    def remove_attribute(self, attr_name):
        return _PyMesh.Mesh_remove_attribute(self, attr_name)

    def get_attribute(self, *args):
        return _PyMesh.Mesh_get_attribute(self, *args)

    def set_attribute(self, attr_name, attr_value):
        return _PyMesh.Mesh_set_attribute(self, attr_name, attr_value)

    def get_attribute_names(self):
        return _PyMesh.Mesh_get_attribute_names(self)
Mesh_swigregister = _PyMesh.Mesh_swigregister
Mesh_swigregister(Mesh)

class MeshFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeshFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MeshFactory, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyMesh.new_MeshFactory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def load_file(self, filename):
        return _PyMesh.MeshFactory_load_file(self, filename)

    def load_data(self, vertices, faces, voxels, dim, num_vertex_per_face, num_vertex_per_voxel):
        return _PyMesh.MeshFactory_load_data(self, vertices, faces, voxels, dim, num_vertex_per_face, num_vertex_per_voxel)

    def with_connectivity(self, conn_type):
        return _PyMesh.MeshFactory_with_connectivity(self, conn_type)

    def with_attribute(self, attr_name):
        return _PyMesh.MeshFactory_with_attribute(self, attr_name)

    def drop_zero_dim(self):
        return _PyMesh.MeshFactory_drop_zero_dim(self)

    def create(self):
        return _PyMesh.MeshFactory_create(self)

    def create_shared(self):
        return _PyMesh.MeshFactory_create_shared(self)
    __swig_destroy__ = _PyMesh.delete_MeshFactory
    __del__ = lambda self: None
MeshFactory_swigregister = _PyMesh.MeshFactory_swigregister
MeshFactory_swigregister(MeshFactory)

class MeshWriter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeshWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MeshWriter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    if _newclass:
        create_writer = staticmethod(_PyMesh.MeshWriter_create_writer)
    else:
        create_writer = _PyMesh.MeshWriter_create_writer
    if _newclass:
        create = staticmethod(_PyMesh.MeshWriter_create)
    else:
        create = _PyMesh.MeshWriter_create
    __swig_destroy__ = _PyMesh.delete_MeshWriter
    __del__ = lambda self: None

    def with_attribute(self, attr_name):
        return _PyMesh.MeshWriter_with_attribute(self, attr_name)

    def in_ascii(self):
        return _PyMesh.MeshWriter_in_ascii(self)

    def use_float(self):
        return _PyMesh.MeshWriter_use_float(self)

    def write_mesh(self, mesh):
        return _PyMesh.MeshWriter_write_mesh(self, mesh)

    def write(self, vertices, faces, voxels, dim, vertex_per_face, vertex_per_voxel):
        return _PyMesh.MeshWriter_write(self, vertices, faces, voxels, dim, vertex_per_face, vertex_per_voxel)

    def set_output_filename(self, filename):
        return _PyMesh.MeshWriter_set_output_filename(self, filename)

    def set_anonymous(self):
        return _PyMesh.MeshWriter_set_anonymous(self)

    def is_anonymous(self):
        return _PyMesh.MeshWriter_is_anonymous(self)
MeshWriter_swigregister = _PyMesh.MeshWriter_swigregister
MeshWriter_swigregister(MeshWriter)

def MeshWriter_create_writer(filename):
    return _PyMesh.MeshWriter_create_writer(filename)
MeshWriter_create_writer = _PyMesh.MeshWriter_create_writer

def MeshWriter_create(filename):
    return _PyMesh.MeshWriter_create(filename)
MeshWriter_create = _PyMesh.MeshWriter_create

class HashGrid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashGrid, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    STL_HASH = _PyMesh.HashGrid_STL_HASH
    SPARSE_HASH = _PyMesh.HashGrid_SPARSE_HASH
    DENSE_HASH = _PyMesh.HashGrid_DENSE_HASH
    if _newclass:
        create = staticmethod(_PyMesh.HashGrid_create)
    else:
        create = _PyMesh.HashGrid_create
    __swig_destroy__ = _PyMesh.delete_HashGrid
    __del__ = lambda self: None

    def insert(self, obj_id, coordinates):
        return _PyMesh.HashGrid_insert(self, obj_id, coordinates)

    def insert_bbox(self, obj_id, shape):
        return _PyMesh.HashGrid_insert_bbox(self, obj_id, shape)

    def insert_triangle(self, obj_id, shape):
        return _PyMesh.HashGrid_insert_triangle(self, obj_id, shape)

    def insert_multiple_triangles(self, obj_ids, shape):
        return _PyMesh.HashGrid_insert_multiple_triangles(self, obj_ids, shape)

    def insert_batch(self, obj_id, points):
        return _PyMesh.HashGrid_insert_batch(self, obj_id, points)

    def insert_multiple(self, obj_ids, points):
        return _PyMesh.HashGrid_insert_multiple(self, obj_ids, points)

    def remove(self, obj_id, coordinate):
        return _PyMesh.HashGrid_remove(self, obj_id, coordinate)

    def occupied(self, obj_id, coordinate):
        return _PyMesh.HashGrid_occupied(self, obj_id, coordinate)

    def bucket_count(self):
        return _PyMesh.HashGrid_bucket_count(self)

    def size(self):
        return _PyMesh.HashGrid_size(self)

    def get_items_near_point(self, coordinate):
        return _PyMesh.HashGrid_get_items_near_point(self, coordinate)

    def get_occupied_cell_centers(self):
        return _PyMesh.HashGrid_get_occupied_cell_centers(self)
HashGrid_swigregister = _PyMesh.HashGrid_swigregister
HashGrid_swigregister(HashGrid)

def HashGrid_create(*args):
    return _PyMesh.HashGrid_create(*args)
HashGrid_create = _PyMesh.HashGrid_create

class ZSparseMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZSparseMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZSparseMatrix, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PyMesh.new_ZSparseMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyMesh.delete_ZSparseMatrix
    __del__ = lambda self: None

    def num_rows(self):
        return _PyMesh.ZSparseMatrix_num_rows(self)

    def num_cols(self):
        return _PyMesh.ZSparseMatrix_num_cols(self)

    def get_inner_size(self):
        return _PyMesh.ZSparseMatrix_get_inner_size(self)

    def get_outer_size(self):
        return _PyMesh.ZSparseMatrix_get_outer_size(self)

    def get_value_size(self):
        return _PyMesh.ZSparseMatrix_get_value_size(self)

    def get_inner_indices(self, np_idx_array):
        return _PyMesh.ZSparseMatrix_get_inner_indices(self, np_idx_array)

    def get_outer_indices(self, np_idx_array):
        return _PyMesh.ZSparseMatrix_get_outer_indices(self, np_idx_array)

    def get_values(self, np_value_array):
        return _PyMesh.ZSparseMatrix_get_values(self, np_value_array)

    def import_raw_csc(self, num_rows, num_cols, inner_idx_array, outer_idx_array, value_array):
        return _PyMesh.ZSparseMatrix_import_raw_csc(self, num_rows, num_cols, inner_idx_array, outer_idx_array, value_array)

    def import_raw_coo(self, num_rows, num_cols, row_indices, col_indices, value_array):
        return _PyMesh.ZSparseMatrix_import_raw_coo(self, num_rows, num_cols, row_indices, col_indices, value_array)
ZSparseMatrix_swigregister = _PyMesh.ZSparseMatrix_swigregister
ZSparseMatrix_swigregister(ZSparseMatrix)

# This file is compatible with both classic and new-style classes.


