# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_PyMeshUtils')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_PyMeshUtils')
    _PyMeshUtils = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PyMeshUtils', [dirname(__file__)])
        except ImportError:
            import _PyMeshUtils
            return _PyMeshUtils
        try:
            _mod = imp.load_module('_PyMeshUtils', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _PyMeshUtils = swig_import_helper()
    del swig_import_helper
else:
    import _PyMeshUtils
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class ZSparseMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZSparseMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZSparseMatrix, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _PyMeshUtils.new_ZSparseMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyMeshUtils.delete_ZSparseMatrix
    __del__ = lambda self: None

    def num_rows(self):
        return _PyMeshUtils.ZSparseMatrix_num_rows(self)

    def num_cols(self):
        return _PyMeshUtils.ZSparseMatrix_num_cols(self)

    def get_inner_size(self):
        return _PyMeshUtils.ZSparseMatrix_get_inner_size(self)

    def get_outer_size(self):
        return _PyMeshUtils.ZSparseMatrix_get_outer_size(self)

    def get_value_size(self):
        return _PyMeshUtils.ZSparseMatrix_get_value_size(self)

    def get_inner_indices(self, np_idx_array):
        return _PyMeshUtils.ZSparseMatrix_get_inner_indices(self, np_idx_array)

    def get_outer_indices(self, np_idx_array):
        return _PyMeshUtils.ZSparseMatrix_get_outer_indices(self, np_idx_array)

    def get_values(self, np_value_array):
        return _PyMeshUtils.ZSparseMatrix_get_values(self, np_value_array)

    def import_raw_csc(self, num_rows, num_cols, inner_idx_array, outer_idx_array, value_array):
        return _PyMeshUtils.ZSparseMatrix_import_raw_csc(self, num_rows, num_cols, inner_idx_array, outer_idx_array, value_array)

    def import_raw_coo(self, num_rows, num_cols, row_indices, col_indices, value_array):
        return _PyMeshUtils.ZSparseMatrix_import_raw_coo(self, num_rows, num_cols, row_indices, col_indices, value_array)
ZSparseMatrix_swigregister = _PyMeshUtils.ZSparseMatrix_swigregister
ZSparseMatrix_swigregister(ZSparseMatrix)

SHARED_PTR_DISOWN = _PyMeshUtils.SHARED_PTR_DISOWN
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyMeshUtils.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _PyMeshUtils.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _PyMeshUtils.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _PyMeshUtils.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _PyMeshUtils.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _PyMeshUtils.SwigPyIterator_equal(self, x)

    def copy(self):
        return _PyMeshUtils.SwigPyIterator_copy(self)

    def next(self):
        return _PyMeshUtils.SwigPyIterator_next(self)

    def __next__(self):
        return _PyMeshUtils.SwigPyIterator___next__(self)

    def previous(self):
        return _PyMeshUtils.SwigPyIterator_previous(self)

    def advance(self, n):
        return _PyMeshUtils.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _PyMeshUtils.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _PyMeshUtils.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _PyMeshUtils.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _PyMeshUtils.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _PyMeshUtils.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _PyMeshUtils.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _PyMeshUtils.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectori(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PyMeshUtils.vectori_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyMeshUtils.vectori___nonzero__(self)

    def __bool__(self):
        return _PyMeshUtils.vectori___bool__(self)

    def __len__(self):
        return _PyMeshUtils.vectori___len__(self)

    def __getslice__(self, i, j):
        return _PyMeshUtils.vectori___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyMeshUtils.vectori___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyMeshUtils.vectori___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyMeshUtils.vectori___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyMeshUtils.vectori___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyMeshUtils.vectori___setitem__(self, *args)

    def pop(self):
        return _PyMeshUtils.vectori_pop(self)

    def append(self, x):
        return _PyMeshUtils.vectori_append(self, x)

    def empty(self):
        return _PyMeshUtils.vectori_empty(self)

    def size(self):
        return _PyMeshUtils.vectori_size(self)

    def swap(self, v):
        return _PyMeshUtils.vectori_swap(self, v)

    def begin(self):
        return _PyMeshUtils.vectori_begin(self)

    def end(self):
        return _PyMeshUtils.vectori_end(self)

    def rbegin(self):
        return _PyMeshUtils.vectori_rbegin(self)

    def rend(self):
        return _PyMeshUtils.vectori_rend(self)

    def clear(self):
        return _PyMeshUtils.vectori_clear(self)

    def get_allocator(self):
        return _PyMeshUtils.vectori_get_allocator(self)

    def pop_back(self):
        return _PyMeshUtils.vectori_pop_back(self)

    def erase(self, *args):
        return _PyMeshUtils.vectori_erase(self, *args)

    def __init__(self, *args):
        this = _PyMeshUtils.new_vectori(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PyMeshUtils.vectori_push_back(self, x)

    def front(self):
        return _PyMeshUtils.vectori_front(self)

    def back(self):
        return _PyMeshUtils.vectori_back(self)

    def assign(self, n, x):
        return _PyMeshUtils.vectori_assign(self, n, x)

    def resize(self, *args):
        return _PyMeshUtils.vectori_resize(self, *args)

    def insert(self, *args):
        return _PyMeshUtils.vectori_insert(self, *args)

    def reserve(self, n):
        return _PyMeshUtils.vectori_reserve(self, n)

    def capacity(self):
        return _PyMeshUtils.vectori_capacity(self)
    __swig_destroy__ = _PyMeshUtils.delete_vectori
    __del__ = lambda self: None
vectori_swigregister = _PyMeshUtils.vectori_swigregister
vectori_swigregister(vectori)

class vectord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectord, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PyMeshUtils.vectord_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyMeshUtils.vectord___nonzero__(self)

    def __bool__(self):
        return _PyMeshUtils.vectord___bool__(self)

    def __len__(self):
        return _PyMeshUtils.vectord___len__(self)

    def __getslice__(self, i, j):
        return _PyMeshUtils.vectord___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyMeshUtils.vectord___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyMeshUtils.vectord___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyMeshUtils.vectord___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyMeshUtils.vectord___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyMeshUtils.vectord___setitem__(self, *args)

    def pop(self):
        return _PyMeshUtils.vectord_pop(self)

    def append(self, x):
        return _PyMeshUtils.vectord_append(self, x)

    def empty(self):
        return _PyMeshUtils.vectord_empty(self)

    def size(self):
        return _PyMeshUtils.vectord_size(self)

    def swap(self, v):
        return _PyMeshUtils.vectord_swap(self, v)

    def begin(self):
        return _PyMeshUtils.vectord_begin(self)

    def end(self):
        return _PyMeshUtils.vectord_end(self)

    def rbegin(self):
        return _PyMeshUtils.vectord_rbegin(self)

    def rend(self):
        return _PyMeshUtils.vectord_rend(self)

    def clear(self):
        return _PyMeshUtils.vectord_clear(self)

    def get_allocator(self):
        return _PyMeshUtils.vectord_get_allocator(self)

    def pop_back(self):
        return _PyMeshUtils.vectord_pop_back(self)

    def erase(self, *args):
        return _PyMeshUtils.vectord_erase(self, *args)

    def __init__(self, *args):
        this = _PyMeshUtils.new_vectord(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PyMeshUtils.vectord_push_back(self, x)

    def front(self):
        return _PyMeshUtils.vectord_front(self)

    def back(self):
        return _PyMeshUtils.vectord_back(self)

    def assign(self, n, x):
        return _PyMeshUtils.vectord_assign(self, n, x)

    def resize(self, *args):
        return _PyMeshUtils.vectord_resize(self, *args)

    def insert(self, *args):
        return _PyMeshUtils.vectord_insert(self, *args)

    def reserve(self, n):
        return _PyMeshUtils.vectord_reserve(self, n)

    def capacity(self):
        return _PyMeshUtils.vectord_capacity(self)
    __swig_destroy__ = _PyMeshUtils.delete_vectord
    __del__ = lambda self: None
vectord_swigregister = _PyMeshUtils.vectord_swigregister
vectord_swigregister(vectord)

class vectors(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectors, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PyMeshUtils.vectors_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyMeshUtils.vectors___nonzero__(self)

    def __bool__(self):
        return _PyMeshUtils.vectors___bool__(self)

    def __len__(self):
        return _PyMeshUtils.vectors___len__(self)

    def __getslice__(self, i, j):
        return _PyMeshUtils.vectors___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyMeshUtils.vectors___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyMeshUtils.vectors___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyMeshUtils.vectors___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyMeshUtils.vectors___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyMeshUtils.vectors___setitem__(self, *args)

    def pop(self):
        return _PyMeshUtils.vectors_pop(self)

    def append(self, x):
        return _PyMeshUtils.vectors_append(self, x)

    def empty(self):
        return _PyMeshUtils.vectors_empty(self)

    def size(self):
        return _PyMeshUtils.vectors_size(self)

    def swap(self, v):
        return _PyMeshUtils.vectors_swap(self, v)

    def begin(self):
        return _PyMeshUtils.vectors_begin(self)

    def end(self):
        return _PyMeshUtils.vectors_end(self)

    def rbegin(self):
        return _PyMeshUtils.vectors_rbegin(self)

    def rend(self):
        return _PyMeshUtils.vectors_rend(self)

    def clear(self):
        return _PyMeshUtils.vectors_clear(self)

    def get_allocator(self):
        return _PyMeshUtils.vectors_get_allocator(self)

    def pop_back(self):
        return _PyMeshUtils.vectors_pop_back(self)

    def erase(self, *args):
        return _PyMeshUtils.vectors_erase(self, *args)

    def __init__(self, *args):
        this = _PyMeshUtils.new_vectors(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PyMeshUtils.vectors_push_back(self, x)

    def front(self):
        return _PyMeshUtils.vectors_front(self)

    def back(self):
        return _PyMeshUtils.vectors_back(self)

    def assign(self, n, x):
        return _PyMeshUtils.vectors_assign(self, n, x)

    def resize(self, *args):
        return _PyMeshUtils.vectors_resize(self, *args)

    def insert(self, *args):
        return _PyMeshUtils.vectors_insert(self, *args)

    def reserve(self, n):
        return _PyMeshUtils.vectors_reserve(self, n)

    def capacity(self):
        return _PyMeshUtils.vectors_capacity(self)
    __swig_destroy__ = _PyMeshUtils.delete_vectors
    __del__ = lambda self: None
vectors_swigregister = _PyMeshUtils.vectors_swigregister
vectors_swigregister(vectors)

class Mesh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyMeshUtils.delete_Mesh
    __del__ = lambda self: None

    def get_dim(self):
        return _PyMeshUtils.Mesh_get_dim(self)

    def get_num_vertices(self):
        return _PyMeshUtils.Mesh_get_num_vertices(self)

    def get_num_faces(self):
        return _PyMeshUtils.Mesh_get_num_faces(self)

    def get_num_voxels(self):
        return _PyMeshUtils.Mesh_get_num_voxels(self)

    def get_vertex(self, *args):
        return _PyMeshUtils.Mesh_get_vertex(self, *args)

    def get_face(self, *args):
        return _PyMeshUtils.Mesh_get_face(self, *args)

    def get_voxel(self, *args):
        return _PyMeshUtils.Mesh_get_voxel(self, *args)

    def get_vertices(self, *args):
        return _PyMeshUtils.Mesh_get_vertices(self, *args)

    def get_faces(self, *args):
        return _PyMeshUtils.Mesh_get_faces(self, *args)

    def get_voxels(self, *args):
        return _PyMeshUtils.Mesh_get_voxels(self, *args)

    def get_vertex_per_face(self):
        return _PyMeshUtils.Mesh_get_vertex_per_face(self)

    def get_vertex_per_voxel(self):
        return _PyMeshUtils.Mesh_get_vertex_per_voxel(self)

    def enable_connectivity(self):
        return _PyMeshUtils.Mesh_enable_connectivity(self)

    def enable_vertex_connectivity(self):
        return _PyMeshUtils.Mesh_enable_vertex_connectivity(self)

    def enable_face_connectivity(self):
        return _PyMeshUtils.Mesh_enable_face_connectivity(self)

    def enable_voxel_connectivity(self):
        return _PyMeshUtils.Mesh_enable_voxel_connectivity(self)

    def get_vertex_adjacent_vertices(self, vi):
        return _PyMeshUtils.Mesh_get_vertex_adjacent_vertices(self, vi)

    def get_vertex_adjacent_faces(self, vi):
        return _PyMeshUtils.Mesh_get_vertex_adjacent_faces(self, vi)

    def get_vertex_adjacent_voxels(self, vi):
        return _PyMeshUtils.Mesh_get_vertex_adjacent_voxels(self, vi)

    def get_face_adjacent_faces(self, fi):
        return _PyMeshUtils.Mesh_get_face_adjacent_faces(self, fi)

    def get_face_adjacent_voxels(self, fi):
        return _PyMeshUtils.Mesh_get_face_adjacent_voxels(self, fi)

    def get_voxel_adjacent_faces(self, Vi):
        return _PyMeshUtils.Mesh_get_voxel_adjacent_faces(self, Vi)

    def get_voxel_adjacent_voxels(self, Vi):
        return _PyMeshUtils.Mesh_get_voxel_adjacent_voxels(self, Vi)

    def has_attribute(self, attr_name):
        return _PyMeshUtils.Mesh_has_attribute(self, attr_name)

    def add_attribute(self, attr_name):
        return _PyMeshUtils.Mesh_add_attribute(self, attr_name)

    def remove_attribute(self, attr_name):
        return _PyMeshUtils.Mesh_remove_attribute(self, attr_name)

    def get_attribute(self, *args):
        return _PyMeshUtils.Mesh_get_attribute(self, *args)

    def set_attribute(self, attr_name, attr_value):
        return _PyMeshUtils.Mesh_set_attribute(self, attr_name, attr_value)

    def get_attribute_names(self):
        return _PyMeshUtils.Mesh_get_attribute_names(self)
Mesh_swigregister = _PyMeshUtils.Mesh_swigregister
Mesh_swigregister(Mesh)


def convert_to_vertex_attribute(mesh, attribute):
    return _PyMeshUtils.convert_to_vertex_attribute(mesh, attribute)
convert_to_vertex_attribute = _PyMeshUtils.convert_to_vertex_attribute

def convert_to_vertex_attribute_from_name(mesh, attribute_name):
    return _PyMeshUtils.convert_to_vertex_attribute_from_name(mesh, attribute_name)
convert_to_vertex_attribute_from_name = _PyMeshUtils.convert_to_vertex_attribute_from_name

def convert_to_face_attribute(mesh, attribute):
    return _PyMeshUtils.convert_to_face_attribute(mesh, attribute)
convert_to_face_attribute = _PyMeshUtils.convert_to_face_attribute

def convert_to_face_attribute_from_name(mesh, attribute_name):
    return _PyMeshUtils.convert_to_face_attribute_from_name(mesh, attribute_name)
convert_to_face_attribute_from_name = _PyMeshUtils.convert_to_face_attribute_from_name

def convert_to_voxel_attribute(mesh, attribute):
    return _PyMeshUtils.convert_to_voxel_attribute(mesh, attribute)
convert_to_voxel_attribute = _PyMeshUtils.convert_to_voxel_attribute

def convert_to_voxel_attribute_from_name(mesh, attribute_name):
    return _PyMeshUtils.convert_to_voxel_attribute_from_name(mesh, attribute_name)
convert_to_voxel_attribute_from_name = _PyMeshUtils.convert_to_voxel_attribute_from_name
class TriangleMetric(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriangleMetric, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriangleMetric, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _PyMeshUtils.new_TriangleMetric()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def update(self, p1, p2, p3, p4, p5, p6):
        return _PyMeshUtils.TriangleMetric_update(self, p1, p2, p3, p4, p5, p6)

    def getClosestPts(self, p1, p2):
        return _PyMeshUtils.TriangleMetric_getClosestPts(self, p1, p2)

    def getDistance(self):
        return _PyMeshUtils.TriangleMetric_getDistance(self)
    if _newclass:
        test = staticmethod(_PyMeshUtils.TriangleMetric_test)
    else:
        test = _PyMeshUtils.TriangleMetric_test
    if _newclass:
        setUseLinCanny = staticmethod(_PyMeshUtils.TriangleMetric_setUseLinCanny)
    else:
        setUseLinCanny = _PyMeshUtils.TriangleMetric_setUseLinCanny
    __swig_destroy__ = _PyMeshUtils.delete_TriangleMetric
    __del__ = lambda self: None
TriangleMetric_swigregister = _PyMeshUtils.TriangleMetric_swigregister
TriangleMetric_swigregister(TriangleMetric)

def TriangleMetric_test():
    return _PyMeshUtils.TriangleMetric_test()
TriangleMetric_test = _PyMeshUtils.TriangleMetric_test

def TriangleMetric_setUseLinCanny(v):
    return _PyMeshUtils.TriangleMetric_setUseLinCanny(v)
TriangleMetric_setUseLinCanny = _PyMeshUtils.TriangleMetric_setUseLinCanny

class ObtuseTriangleRemoval(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObtuseTriangleRemoval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObtuseTriangleRemoval, name)
    __repr__ = _swig_repr

    def __init__(self, vertices, faces):
        this = _PyMeshUtils.new_ObtuseTriangleRemoval(vertices, faces)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def run(self, max_angle_allowed, max_iterations=1):
        return _PyMeshUtils.ObtuseTriangleRemoval_run(self, max_angle_allowed, max_iterations)

    def get_vertices(self):
        return _PyMeshUtils.ObtuseTriangleRemoval_get_vertices(self)

    def get_faces(self):
        return _PyMeshUtils.ObtuseTriangleRemoval_get_faces(self)
    __swig_destroy__ = _PyMeshUtils.delete_ObtuseTriangleRemoval
    __del__ = lambda self: None
ObtuseTriangleRemoval_swigregister = _PyMeshUtils.ObtuseTriangleRemoval_swigregister
ObtuseTriangleRemoval_swigregister(ObtuseTriangleRemoval)

class ShortEdgeRemoval(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShortEdgeRemoval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShortEdgeRemoval, name)
    __repr__ = _swig_repr

    def __init__(self, vertices, faces):
        this = _PyMeshUtils.new_ShortEdgeRemoval(vertices, faces)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_importance(self, importance):
        return _PyMeshUtils.ShortEdgeRemoval_set_importance(self, importance)

    def run(self, threshold):
        return _PyMeshUtils.ShortEdgeRemoval_run(self, threshold)

    def get_vertices(self):
        return _PyMeshUtils.ShortEdgeRemoval_get_vertices(self)

    def get_faces(self):
        return _PyMeshUtils.ShortEdgeRemoval_get_faces(self)

    def get_face_indices(self):
        return _PyMeshUtils.ShortEdgeRemoval_get_face_indices(self)
    __swig_destroy__ = _PyMeshUtils.delete_ShortEdgeRemoval
    __del__ = lambda self: None
ShortEdgeRemoval_swigregister = _PyMeshUtils.ShortEdgeRemoval_swigregister
ShortEdgeRemoval_swigregister(ShortEdgeRemoval)


def extract_exterior_faces(voxels):
    return _PyMeshUtils.extract_exterior_faces(voxels)
extract_exterior_faces = _PyMeshUtils.extract_exterior_faces
class MeshSeparator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeshSeparator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MeshSeparator, name)
    __repr__ = _swig_repr

    def __init__(self, elements):
        this = _PyMeshUtils.new_MeshSeparator(elements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    VERTEX = _PyMeshUtils.MeshSeparator_VERTEX
    FACE = _PyMeshUtils.MeshSeparator_FACE
    VOXEL = _PyMeshUtils.MeshSeparator_VOXEL

    def set_connectivity_type(self, connectivity):
        return _PyMeshUtils.MeshSeparator_set_connectivity_type(self, connectivity)

    def separate(self):
        return _PyMeshUtils.MeshSeparator_separate(self)

    def get_component(self, i):
        return _PyMeshUtils.MeshSeparator_get_component(self, i)

    def get_sources(self, i):
        return _PyMeshUtils.MeshSeparator_get_sources(self, i)

    def clear(self):
        return _PyMeshUtils.MeshSeparator_clear(self)
    __swig_destroy__ = _PyMeshUtils.delete_MeshSeparator
    __del__ = lambda self: None
MeshSeparator_swigregister = _PyMeshUtils.MeshSeparator_swigregister
MeshSeparator_swigregister(MeshSeparator)

class Boundary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Boundary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Boundary, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    if _newclass:
        extract_surface_boundary = staticmethod(_PyMeshUtils.Boundary_extract_surface_boundary)
    else:
        extract_surface_boundary = _PyMeshUtils.Boundary_extract_surface_boundary
    if _newclass:
        extract_surface_boundary_raw = staticmethod(_PyMeshUtils.Boundary_extract_surface_boundary_raw)
    else:
        extract_surface_boundary_raw = _PyMeshUtils.Boundary_extract_surface_boundary_raw
    if _newclass:
        extract_volume_boundary = staticmethod(_PyMeshUtils.Boundary_extract_volume_boundary)
    else:
        extract_volume_boundary = _PyMeshUtils.Boundary_extract_volume_boundary
    if _newclass:
        extract_volume_boundary_raw = staticmethod(_PyMeshUtils.Boundary_extract_volume_boundary_raw)
    else:
        extract_volume_boundary_raw = _PyMeshUtils.Boundary_extract_volume_boundary_raw

    def get_num_boundaries(self):
        return _PyMeshUtils.Boundary_get_num_boundaries(self)

    def get_boundaries(self):
        return _PyMeshUtils.Boundary_get_boundaries(self)

    def get_boundary(self, bi):
        return _PyMeshUtils.Boundary_get_boundary(self, bi)

    def get_boundary_element(self, bi):
        return _PyMeshUtils.Boundary_get_boundary_element(self, bi)

    def get_num_boundary_nodes(self):
        return _PyMeshUtils.Boundary_get_num_boundary_nodes(self)

    def get_boundary_nodes(self):
        return _PyMeshUtils.Boundary_get_boundary_nodes(self)
    __swig_destroy__ = _PyMeshUtils.delete_Boundary
    __del__ = lambda self: None
Boundary_swigregister = _PyMeshUtils.Boundary_swigregister
Boundary_swigregister(Boundary)

def Boundary_extract_surface_boundary(mesh):
    return _PyMeshUtils.Boundary_extract_surface_boundary(mesh)
Boundary_extract_surface_boundary = _PyMeshUtils.Boundary_extract_surface_boundary

def Boundary_extract_surface_boundary_raw(vertices, faces):
    return _PyMeshUtils.Boundary_extract_surface_boundary_raw(vertices, faces)
Boundary_extract_surface_boundary_raw = _PyMeshUtils.Boundary_extract_surface_boundary_raw

def Boundary_extract_volume_boundary(mesh):
    return _PyMeshUtils.Boundary_extract_volume_boundary(mesh)
Boundary_extract_volume_boundary = _PyMeshUtils.Boundary_extract_volume_boundary

def Boundary_extract_volume_boundary_raw(vertices, voxels):
    return _PyMeshUtils.Boundary_extract_volume_boundary_raw(vertices, voxels)
Boundary_extract_volume_boundary_raw = _PyMeshUtils.Boundary_extract_volume_boundary_raw

class PointLocator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointLocator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointLocator, name)
    __repr__ = _swig_repr

    def __init__(self, mesh):
        this = _PyMeshUtils.new_PointLocator(mesh)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def locate(self, points):
        return _PyMeshUtils.PointLocator_locate(self, points)

    def get_enclosing_voxels(self):
        return _PyMeshUtils.PointLocator_get_enclosing_voxels(self)

    def get_barycentric_coords(self):
        return _PyMeshUtils.PointLocator_get_barycentric_coords(self)

    def clear(self):
        return _PyMeshUtils.PointLocator_clear(self)
    __swig_destroy__ = _PyMeshUtils.delete_PointLocator
    __del__ = lambda self: None
PointLocator_swigregister = _PyMeshUtils.PointLocator_swigregister
PointLocator_swigregister(PointLocator)

class Subdivision(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Subdivision, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Subdivision, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    if _newclass:
        create = staticmethod(_PyMeshUtils.Subdivision_create)
    else:
        create = _PyMeshUtils.Subdivision_create
    __swig_destroy__ = _PyMeshUtils.delete_Subdivision
    __del__ = lambda self: None

    def subdivide(self, vertices, faces, num_iterations):
        return _PyMeshUtils.Subdivision_subdivide(self, vertices, faces, num_iterations)

    def get_subdivision_matrices(self):
        return _PyMeshUtils.Subdivision_get_subdivision_matrices(self)

    def get_vertices(self):
        return _PyMeshUtils.Subdivision_get_vertices(self)

    def get_faces(self):
        return _PyMeshUtils.Subdivision_get_faces(self)

    def get_face_indices(self):
        return _PyMeshUtils.Subdivision_get_face_indices(self)

    def get_num_vertices(self):
        return _PyMeshUtils.Subdivision_get_num_vertices(self)

    def get_num_faces(self):
        return _PyMeshUtils.Subdivision_get_num_faces(self)
Subdivision_swigregister = _PyMeshUtils.Subdivision_swigregister
Subdivision_swigregister(Subdivision)

def Subdivision_create(type):
    return _PyMeshUtils.Subdivision_create(type)
Subdivision_create = _PyMeshUtils.Subdivision_create

class DuplicatedVertexRemoval(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DuplicatedVertexRemoval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DuplicatedVertexRemoval, name)
    __repr__ = _swig_repr

    def __init__(self, vertices, faces):
        this = _PyMeshUtils.new_DuplicatedVertexRemoval(vertices, faces)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def run(self, tol):
        return _PyMeshUtils.DuplicatedVertexRemoval_run(self, tol)

    def get_vertices(self):
        return _PyMeshUtils.DuplicatedVertexRemoval_get_vertices(self)

    def get_faces(self):
        return _PyMeshUtils.DuplicatedVertexRemoval_get_faces(self)

    def set_importance_level(self, level):
        return _PyMeshUtils.DuplicatedVertexRemoval_set_importance_level(self, level)

    def get_index_map(self):
        return _PyMeshUtils.DuplicatedVertexRemoval_get_index_map(self)
    __swig_destroy__ = _PyMeshUtils.delete_DuplicatedVertexRemoval
    __del__ = lambda self: None
DuplicatedVertexRemoval_swigregister = _PyMeshUtils.DuplicatedVertexRemoval_swigregister
DuplicatedVertexRemoval_swigregister(DuplicatedVertexRemoval)

class IsolatedVertexRemoval(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsolatedVertexRemoval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IsolatedVertexRemoval, name)
    __repr__ = _swig_repr

    def __init__(self, vertices, faces):
        this = _PyMeshUtils.new_IsolatedVertexRemoval(vertices, faces)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def run(self):
        return _PyMeshUtils.IsolatedVertexRemoval_run(self)

    def get_vertices(self):
        return _PyMeshUtils.IsolatedVertexRemoval_get_vertices(self)

    def get_faces(self):
        return _PyMeshUtils.IsolatedVertexRemoval_get_faces(self)

    def get_ori_vertex_indices(self):
        return _PyMeshUtils.IsolatedVertexRemoval_get_ori_vertex_indices(self)
    __swig_destroy__ = _PyMeshUtils.delete_IsolatedVertexRemoval
    __del__ = lambda self: None
IsolatedVertexRemoval_swigregister = _PyMeshUtils.IsolatedVertexRemoval_swigregister
IsolatedVertexRemoval_swigregister(IsolatedVertexRemoval)

class LongEdgeRemoval(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongEdgeRemoval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongEdgeRemoval, name)
    __repr__ = _swig_repr

    def __init__(self, vertices, faces):
        this = _PyMeshUtils.new_LongEdgeRemoval(vertices, faces)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def run(self, max_length, recursive=True):
        return _PyMeshUtils.LongEdgeRemoval_run(self, max_length, recursive)

    def get_vertices(self):
        return _PyMeshUtils.LongEdgeRemoval_get_vertices(self)

    def get_faces(self):
        return _PyMeshUtils.LongEdgeRemoval_get_faces(self)
    __swig_destroy__ = _PyMeshUtils.delete_LongEdgeRemoval
    __del__ = lambda self: None
LongEdgeRemoval_swigregister = _PyMeshUtils.LongEdgeRemoval_swigregister
LongEdgeRemoval_swigregister(LongEdgeRemoval)

class FinFaceRemoval(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FinFaceRemoval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FinFaceRemoval, name)
    __repr__ = _swig_repr

    def __init__(self, vertices, faces):
        this = _PyMeshUtils.new_FinFaceRemoval(vertices, faces)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_fins_only(self):
        return _PyMeshUtils.FinFaceRemoval_set_fins_only(self)

    def run(self):
        return _PyMeshUtils.FinFaceRemoval_run(self)

    def get_vertices(self):
        return _PyMeshUtils.FinFaceRemoval_get_vertices(self)

    def get_faces(self):
        return _PyMeshUtils.FinFaceRemoval_get_faces(self)

    def get_face_indices(self):
        return _PyMeshUtils.FinFaceRemoval_get_face_indices(self)
    __swig_destroy__ = _PyMeshUtils.delete_FinFaceRemoval
    __del__ = lambda self: None
FinFaceRemoval_swigregister = _PyMeshUtils.FinFaceRemoval_swigregister
FinFaceRemoval_swigregister(FinFaceRemoval)

class MeshChecker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeshChecker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MeshChecker, name)
    __repr__ = _swig_repr

    def __init__(self, vertices, faces, voxels):
        this = _PyMeshUtils.new_MeshChecker(vertices, faces, voxels)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def is_vertex_manifold(self):
        return _PyMeshUtils.MeshChecker_is_vertex_manifold(self)

    def is_edge_manifold(self):
        return _PyMeshUtils.MeshChecker_is_edge_manifold(self)

    def is_closed(self):
        return _PyMeshUtils.MeshChecker_is_closed(self)

    def has_edge_with_odd_adj_faces(self):
        return _PyMeshUtils.MeshChecker_has_edge_with_odd_adj_faces(self)

    def is_oriented(self):
        return _PyMeshUtils.MeshChecker_is_oriented(self)

    def has_complex_boundary(self):
        return _PyMeshUtils.MeshChecker_has_complex_boundary(self)

    def get_num_boundary_edges(self):
        return _PyMeshUtils.MeshChecker_get_num_boundary_edges(self)

    def get_num_boundary_loops(self):
        return _PyMeshUtils.MeshChecker_get_num_boundary_loops(self)

    def get_boundary_edges(self):
        return _PyMeshUtils.MeshChecker_get_boundary_edges(self)

    def get_boundary_loops(self):
        return _PyMeshUtils.MeshChecker_get_boundary_loops(self)

    def get_genus(self):
        return _PyMeshUtils.MeshChecker_get_genus(self)

    def get_euler_characteristic(self):
        return _PyMeshUtils.MeshChecker_get_euler_characteristic(self)

    def get_num_connected_components(self):
        return _PyMeshUtils.MeshChecker_get_num_connected_components(self)

    def get_num_connected_surface_components(self):
        return _PyMeshUtils.MeshChecker_get_num_connected_surface_components(self)

    def get_num_connected_volume_components(self):
        return _PyMeshUtils.MeshChecker_get_num_connected_volume_components(self)

    def get_num_isolated_vertices(self):
        return _PyMeshUtils.MeshChecker_get_num_isolated_vertices(self)

    def get_num_duplicated_faces(self):
        return _PyMeshUtils.MeshChecker_get_num_duplicated_faces(self)

    def compute_signed_volume_from_surface(self):
        return _PyMeshUtils.MeshChecker_compute_signed_volume_from_surface(self)
    __swig_destroy__ = _PyMeshUtils.delete_MeshChecker
    __del__ = lambda self: None
MeshChecker_swigregister = _PyMeshUtils.MeshChecker_swigregister
MeshChecker_swigregister(MeshChecker)

class DegeneratedTriangleRemoval(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DegeneratedTriangleRemoval, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DegeneratedTriangleRemoval, name)
    __repr__ = _swig_repr

    def __init__(self, vertices, faces):
        this = _PyMeshUtils.new_DegeneratedTriangleRemoval(vertices, faces)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def run(self, num_iteraitons=5):
        return _PyMeshUtils.DegeneratedTriangleRemoval_run(self, num_iteraitons)

    def get_vertices(self):
        return _PyMeshUtils.DegeneratedTriangleRemoval_get_vertices(self)

    def get_faces(self):
        return _PyMeshUtils.DegeneratedTriangleRemoval_get_faces(self)

    def get_ori_face_indices(self):
        return _PyMeshUtils.DegeneratedTriangleRemoval_get_ori_face_indices(self)
    __swig_destroy__ = _PyMeshUtils.delete_DegeneratedTriangleRemoval
    __del__ = lambda self: None
DegeneratedTriangleRemoval_swigregister = _PyMeshUtils.DegeneratedTriangleRemoval_swigregister
DegeneratedTriangleRemoval_swigregister(DegeneratedTriangleRemoval)

class vector_size_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_size_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_size_t, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PyMeshUtils.vector_size_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyMeshUtils.vector_size_t___nonzero__(self)

    def __bool__(self):
        return _PyMeshUtils.vector_size_t___bool__(self)

    def __len__(self):
        return _PyMeshUtils.vector_size_t___len__(self)

    def __getslice__(self, i, j):
        return _PyMeshUtils.vector_size_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyMeshUtils.vector_size_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyMeshUtils.vector_size_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyMeshUtils.vector_size_t___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyMeshUtils.vector_size_t___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyMeshUtils.vector_size_t___setitem__(self, *args)

    def pop(self):
        return _PyMeshUtils.vector_size_t_pop(self)

    def append(self, x):
        return _PyMeshUtils.vector_size_t_append(self, x)

    def empty(self):
        return _PyMeshUtils.vector_size_t_empty(self)

    def size(self):
        return _PyMeshUtils.vector_size_t_size(self)

    def swap(self, v):
        return _PyMeshUtils.vector_size_t_swap(self, v)

    def begin(self):
        return _PyMeshUtils.vector_size_t_begin(self)

    def end(self):
        return _PyMeshUtils.vector_size_t_end(self)

    def rbegin(self):
        return _PyMeshUtils.vector_size_t_rbegin(self)

    def rend(self):
        return _PyMeshUtils.vector_size_t_rend(self)

    def clear(self):
        return _PyMeshUtils.vector_size_t_clear(self)

    def get_allocator(self):
        return _PyMeshUtils.vector_size_t_get_allocator(self)

    def pop_back(self):
        return _PyMeshUtils.vector_size_t_pop_back(self)

    def erase(self, *args):
        return _PyMeshUtils.vector_size_t_erase(self, *args)

    def __init__(self, *args):
        this = _PyMeshUtils.new_vector_size_t(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PyMeshUtils.vector_size_t_push_back(self, x)

    def front(self):
        return _PyMeshUtils.vector_size_t_front(self)

    def back(self):
        return _PyMeshUtils.vector_size_t_back(self)

    def assign(self, n, x):
        return _PyMeshUtils.vector_size_t_assign(self, n, x)

    def resize(self, *args):
        return _PyMeshUtils.vector_size_t_resize(self, *args)

    def insert(self, *args):
        return _PyMeshUtils.vector_size_t_insert(self, *args)

    def reserve(self, n):
        return _PyMeshUtils.vector_size_t_reserve(self, n)

    def capacity(self):
        return _PyMeshUtils.vector_size_t_capacity(self)
    __swig_destroy__ = _PyMeshUtils.delete_vector_size_t
    __del__ = lambda self: None
vector_size_t_swigregister = _PyMeshUtils.vector_size_t_swigregister
vector_size_t_swigregister(vector_size_t)


def is_colinear_2D(v0, v1, v2):
    return _PyMeshUtils.is_colinear_2D(v0, v1, v2)
is_colinear_2D = _PyMeshUtils.is_colinear_2D

def is_colinear_3D(v0, v1, v2):
    return _PyMeshUtils.is_colinear_3D(v0, v1, v2)
is_colinear_3D = _PyMeshUtils.is_colinear_3D

def get_degenerated_faces(vertices, faces):
    return _PyMeshUtils.get_degenerated_faces(vertices, faces)
get_degenerated_faces = _PyMeshUtils.get_degenerated_faces
# This file is compatible with both classic and new-style classes.


