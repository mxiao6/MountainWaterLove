# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_PyTriangulation')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_PyTriangulation')
    _PyTriangulation = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PyTriangulation', [dirname(__file__)])
        except ImportError:
            import _PyTriangulation
            return _PyTriangulation
        try:
            _mod = imp.load_module('_PyTriangulation', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _PyTriangulation = swig_import_helper()
    del swig_import_helper
else:
    import _PyTriangulation
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

SHARED_PTR_DISOWN = _PyTriangulation.SHARED_PTR_DISOWN
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyTriangulation.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _PyTriangulation.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _PyTriangulation.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _PyTriangulation.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _PyTriangulation.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _PyTriangulation.SwigPyIterator_equal(self, x)

    def copy(self):
        return _PyTriangulation.SwigPyIterator_copy(self)

    def next(self):
        return _PyTriangulation.SwigPyIterator_next(self)

    def __next__(self):
        return _PyTriangulation.SwigPyIterator___next__(self)

    def previous(self):
        return _PyTriangulation.SwigPyIterator_previous(self)

    def advance(self, n):
        return _PyTriangulation.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _PyTriangulation.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _PyTriangulation.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _PyTriangulation.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _PyTriangulation.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _PyTriangulation.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _PyTriangulation.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _PyTriangulation.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectori(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PyTriangulation.vectori_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyTriangulation.vectori___nonzero__(self)

    def __bool__(self):
        return _PyTriangulation.vectori___bool__(self)

    def __len__(self):
        return _PyTriangulation.vectori___len__(self)

    def __getslice__(self, i, j):
        return _PyTriangulation.vectori___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyTriangulation.vectori___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyTriangulation.vectori___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyTriangulation.vectori___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyTriangulation.vectori___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyTriangulation.vectori___setitem__(self, *args)

    def pop(self):
        return _PyTriangulation.vectori_pop(self)

    def append(self, x):
        return _PyTriangulation.vectori_append(self, x)

    def empty(self):
        return _PyTriangulation.vectori_empty(self)

    def size(self):
        return _PyTriangulation.vectori_size(self)

    def swap(self, v):
        return _PyTriangulation.vectori_swap(self, v)

    def begin(self):
        return _PyTriangulation.vectori_begin(self)

    def end(self):
        return _PyTriangulation.vectori_end(self)

    def rbegin(self):
        return _PyTriangulation.vectori_rbegin(self)

    def rend(self):
        return _PyTriangulation.vectori_rend(self)

    def clear(self):
        return _PyTriangulation.vectori_clear(self)

    def get_allocator(self):
        return _PyTriangulation.vectori_get_allocator(self)

    def pop_back(self):
        return _PyTriangulation.vectori_pop_back(self)

    def erase(self, *args):
        return _PyTriangulation.vectori_erase(self, *args)

    def __init__(self, *args):
        this = _PyTriangulation.new_vectori(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PyTriangulation.vectori_push_back(self, x)

    def front(self):
        return _PyTriangulation.vectori_front(self)

    def back(self):
        return _PyTriangulation.vectori_back(self)

    def assign(self, n, x):
        return _PyTriangulation.vectori_assign(self, n, x)

    def resize(self, *args):
        return _PyTriangulation.vectori_resize(self, *args)

    def insert(self, *args):
        return _PyTriangulation.vectori_insert(self, *args)

    def reserve(self, n):
        return _PyTriangulation.vectori_reserve(self, n)

    def capacity(self):
        return _PyTriangulation.vectori_capacity(self)
    __swig_destroy__ = _PyTriangulation.delete_vectori
    __del__ = lambda self: None
vectori_swigregister = _PyTriangulation.vectori_swigregister
vectori_swigregister(vectori)

class vectord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectord, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PyTriangulation.vectord_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyTriangulation.vectord___nonzero__(self)

    def __bool__(self):
        return _PyTriangulation.vectord___bool__(self)

    def __len__(self):
        return _PyTriangulation.vectord___len__(self)

    def __getslice__(self, i, j):
        return _PyTriangulation.vectord___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyTriangulation.vectord___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyTriangulation.vectord___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyTriangulation.vectord___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyTriangulation.vectord___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyTriangulation.vectord___setitem__(self, *args)

    def pop(self):
        return _PyTriangulation.vectord_pop(self)

    def append(self, x):
        return _PyTriangulation.vectord_append(self, x)

    def empty(self):
        return _PyTriangulation.vectord_empty(self)

    def size(self):
        return _PyTriangulation.vectord_size(self)

    def swap(self, v):
        return _PyTriangulation.vectord_swap(self, v)

    def begin(self):
        return _PyTriangulation.vectord_begin(self)

    def end(self):
        return _PyTriangulation.vectord_end(self)

    def rbegin(self):
        return _PyTriangulation.vectord_rbegin(self)

    def rend(self):
        return _PyTriangulation.vectord_rend(self)

    def clear(self):
        return _PyTriangulation.vectord_clear(self)

    def get_allocator(self):
        return _PyTriangulation.vectord_get_allocator(self)

    def pop_back(self):
        return _PyTriangulation.vectord_pop_back(self)

    def erase(self, *args):
        return _PyTriangulation.vectord_erase(self, *args)

    def __init__(self, *args):
        this = _PyTriangulation.new_vectord(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PyTriangulation.vectord_push_back(self, x)

    def front(self):
        return _PyTriangulation.vectord_front(self)

    def back(self):
        return _PyTriangulation.vectord_back(self)

    def assign(self, n, x):
        return _PyTriangulation.vectord_assign(self, n, x)

    def resize(self, *args):
        return _PyTriangulation.vectord_resize(self, *args)

    def insert(self, *args):
        return _PyTriangulation.vectord_insert(self, *args)

    def reserve(self, n):
        return _PyTriangulation.vectord_reserve(self, n)

    def capacity(self):
        return _PyTriangulation.vectord_capacity(self)
    __swig_destroy__ = _PyTriangulation.delete_vectord
    __del__ = lambda self: None
vectord_swigregister = _PyTriangulation.vectord_swigregister
vectord_swigregister(vectord)

class vectors(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectors, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _PyTriangulation.vectors_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyTriangulation.vectors___nonzero__(self)

    def __bool__(self):
        return _PyTriangulation.vectors___bool__(self)

    def __len__(self):
        return _PyTriangulation.vectors___len__(self)

    def __getslice__(self, i, j):
        return _PyTriangulation.vectors___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyTriangulation.vectors___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyTriangulation.vectors___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyTriangulation.vectors___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyTriangulation.vectors___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyTriangulation.vectors___setitem__(self, *args)

    def pop(self):
        return _PyTriangulation.vectors_pop(self)

    def append(self, x):
        return _PyTriangulation.vectors_append(self, x)

    def empty(self):
        return _PyTriangulation.vectors_empty(self)

    def size(self):
        return _PyTriangulation.vectors_size(self)

    def swap(self, v):
        return _PyTriangulation.vectors_swap(self, v)

    def begin(self):
        return _PyTriangulation.vectors_begin(self)

    def end(self):
        return _PyTriangulation.vectors_end(self)

    def rbegin(self):
        return _PyTriangulation.vectors_rbegin(self)

    def rend(self):
        return _PyTriangulation.vectors_rend(self)

    def clear(self):
        return _PyTriangulation.vectors_clear(self)

    def get_allocator(self):
        return _PyTriangulation.vectors_get_allocator(self)

    def pop_back(self):
        return _PyTriangulation.vectors_pop_back(self)

    def erase(self, *args):
        return _PyTriangulation.vectors_erase(self, *args)

    def __init__(self, *args):
        this = _PyTriangulation.new_vectors(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _PyTriangulation.vectors_push_back(self, x)

    def front(self):
        return _PyTriangulation.vectors_front(self)

    def back(self):
        return _PyTriangulation.vectors_back(self)

    def assign(self, n, x):
        return _PyTriangulation.vectors_assign(self, n, x)

    def resize(self, *args):
        return _PyTriangulation.vectors_resize(self, *args)

    def insert(self, *args):
        return _PyTriangulation.vectors_insert(self, *args)

    def reserve(self, n):
        return _PyTriangulation.vectors_reserve(self, n)

    def capacity(self):
        return _PyTriangulation.vectors_capacity(self)
    __swig_destroy__ = _PyTriangulation.delete_vectors
    __del__ = lambda self: None
vectors_swigregister = _PyTriangulation.vectors_swigregister
vectors_swigregister(vectors)

class Mesh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyTriangulation.delete_Mesh
    __del__ = lambda self: None

    def get_dim(self):
        return _PyTriangulation.Mesh_get_dim(self)

    def get_num_vertices(self):
        return _PyTriangulation.Mesh_get_num_vertices(self)

    def get_num_faces(self):
        return _PyTriangulation.Mesh_get_num_faces(self)

    def get_num_voxels(self):
        return _PyTriangulation.Mesh_get_num_voxels(self)

    def get_vertex(self, *args):
        return _PyTriangulation.Mesh_get_vertex(self, *args)

    def get_face(self, *args):
        return _PyTriangulation.Mesh_get_face(self, *args)

    def get_voxel(self, *args):
        return _PyTriangulation.Mesh_get_voxel(self, *args)

    def get_vertices(self, *args):
        return _PyTriangulation.Mesh_get_vertices(self, *args)

    def get_faces(self, *args):
        return _PyTriangulation.Mesh_get_faces(self, *args)

    def get_voxels(self, *args):
        return _PyTriangulation.Mesh_get_voxels(self, *args)

    def get_vertex_per_face(self):
        return _PyTriangulation.Mesh_get_vertex_per_face(self)

    def get_vertex_per_voxel(self):
        return _PyTriangulation.Mesh_get_vertex_per_voxel(self)

    def enable_connectivity(self):
        return _PyTriangulation.Mesh_enable_connectivity(self)

    def enable_vertex_connectivity(self):
        return _PyTriangulation.Mesh_enable_vertex_connectivity(self)

    def enable_face_connectivity(self):
        return _PyTriangulation.Mesh_enable_face_connectivity(self)

    def enable_voxel_connectivity(self):
        return _PyTriangulation.Mesh_enable_voxel_connectivity(self)

    def get_vertex_adjacent_vertices(self, vi):
        return _PyTriangulation.Mesh_get_vertex_adjacent_vertices(self, vi)

    def get_vertex_adjacent_faces(self, vi):
        return _PyTriangulation.Mesh_get_vertex_adjacent_faces(self, vi)

    def get_vertex_adjacent_voxels(self, vi):
        return _PyTriangulation.Mesh_get_vertex_adjacent_voxels(self, vi)

    def get_face_adjacent_faces(self, fi):
        return _PyTriangulation.Mesh_get_face_adjacent_faces(self, fi)

    def get_face_adjacent_voxels(self, fi):
        return _PyTriangulation.Mesh_get_face_adjacent_voxels(self, fi)

    def get_voxel_adjacent_faces(self, Vi):
        return _PyTriangulation.Mesh_get_voxel_adjacent_faces(self, Vi)

    def get_voxel_adjacent_voxels(self, Vi):
        return _PyTriangulation.Mesh_get_voxel_adjacent_voxels(self, Vi)

    def has_attribute(self, attr_name):
        return _PyTriangulation.Mesh_has_attribute(self, attr_name)

    def add_attribute(self, attr_name):
        return _PyTriangulation.Mesh_add_attribute(self, attr_name)

    def remove_attribute(self, attr_name):
        return _PyTriangulation.Mesh_remove_attribute(self, attr_name)

    def get_attribute(self, *args):
        return _PyTriangulation.Mesh_get_attribute(self, *args)

    def set_attribute(self, attr_name, attr_value):
        return _PyTriangulation.Mesh_set_attribute(self, attr_name, attr_value)

    def get_attribute_names(self):
        return _PyTriangulation.Mesh_get_attribute_names(self)
Mesh_swigregister = _PyTriangulation.Mesh_swigregister
Mesh_swigregister(Mesh)

class Triangulation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Triangulation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Triangulation, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    if _newclass:
        create = staticmethod(_PyTriangulation.Triangulation_create)
    else:
        create = _PyTriangulation.Triangulation_create
    __swig_destroy__ = _PyTriangulation.delete_Triangulation
    __del__ = lambda self: None

    def set_vertices(self, vertices):
        return _PyTriangulation.Triangulation_set_vertices(self, vertices)

    def run(self):
        return _PyTriangulation.Triangulation_run(self)

    def get_faces(self):
        return _PyTriangulation.Triangulation_get_faces(self)
Triangulation_swigregister = _PyTriangulation.Triangulation_swigregister
Triangulation_swigregister(Triangulation)

def Triangulation_create(engine_name):
    return _PyTriangulation.Triangulation_create(engine_name)
Triangulation_create = _PyTriangulation.Triangulation_create

# This file is compatible with both classic and new-style classes.


